export declare enum FluxErrorCode {
    UNKNOWN_ERROR = "UNKNOWN_ERROR",
    NETWORK_ERROR = "NETWORK_ERROR",
    INVALID_ARGUMENT = "INVALID_ARGUMENT",
    MISSING_ARGUMENT = "MISSING_ARGUMENT",
    UNAUTHORIZED = "UNAUTHORIZED",
    CONTRACT_NOT_FOUND = "CONTRACT_NOT_FOUND",
    TRANSACTION_FAILED = "TRANSACTION_FAILED",
    INSUFFICIENT_BALANCE = "INSUFFICIENT_BALANCE",
    INSUFFICIENT_ALLOWANCE = "INSUFFICIENT_ALLOWANCE",
    TOKEN_CAP_EXCEEDED = "TOKEN_CAP_EXCEEDED",
    TOKEN_PAUSED = "TOKEN_PAUSED",
    INVALID_VESTING_SCHEDULE = "INVALID_VESTING_SCHEDULE",
    TOKEN_NOT_FOUND = "TOKEN_NOT_FOUND",
    NOT_TOKEN_OWNER = "NOT_TOKEN_OWNER",
    INVALID_SIGNATURE = "INVALID_SIGNATURE",
    SIGNATURE_EXPIRED = "SIGNATURE_EXPIRED",
    LISTING_NOT_FOUND = "LISTING_NOT_FOUND",
    LISTING_EXPIRED = "LISTING_EXPIRED",
    LISTING_NOT_ACTIVE = "LISTING_NOT_ACTIVE",
    INVALID_PRICE = "INVALID_PRICE",
    OFFER_NOT_FOUND = "OFFER_NOT_FOUND",
    ROLE_NOT_GRANTED = "ROLE_NOT_GRANTED",
    TIMELOCK_NOT_READY = "TIMELOCK_NOT_READY",
    DELEGATION_EXPIRED = "DELEGATION_EXPIRED"
}
export declare class FluxSDKError extends Error {
    code: FluxErrorCode;
    originalError?: unknown;
    constructor(code: FluxErrorCode, message: string, originalError?: unknown);
    static fromError(error: any): FluxSDKError;
}
export declare function handleError(error: any): never;
//# sourceMappingURL=errors.d.ts.map